  name: Deploy Web Profile

  on:
    push:
      branch:
        - main

  jobs:
    build:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Create .env file
          uses: SpicyPizza/create-envfile@v2.0
          with:
            envkey_NODE_ENV: production
            envkey_PORT: ${{ secrets.PORT }}
            envkey_HOST: ${{ secrets.VPS_HOST }}
            envkey_NEXTAUTH_URL: http://${{ secrets.VPS_HOST }}:${{ secrets.PORT }}
            envkey_NEXTAUTH_SECRET: "PL8q5omVlzWMEg42twhSyEj8mjixrykdmbb9E4Txnjs="
            envkey_DOCKER_PORT: "3000"

        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: "18"

        - name: Install Dependencies
          run: npm install

        - name: Build Docker images
          run: |
            docker-compose -f docker-compose.yml build

        - name: Save Docker Image to Tarball
          run: |
            docker save web-profile-next-app -o web-profile-next-app.tar
            gzip web-profile-next-app.tar

        - name: Check if Tarball exists
          run: test -e web-profile-next-app.tar.gz

        - uses: actions/upload-artifact@v4
          with:
            name: my-artifact
            path: web-profile-next-app.tar.gz

        - uses: actions/download-artifact@v4
          with:
            name: my-artifact
            path: dockerfiles

        - name: Transfer file via FTP
          uses: appleboy/scp-action@v0.1.7
          with:
            host: ${{ secrets.VPS_HOST }}
            username: ${{ secrets.VPS_USERNAME }}
            key: ${{ secrets.SSH_KEY }}
            source: dockerfiles/*
            target: "/home/harisramadan22/"

        - name: Deploy to VPS
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.VPS_HOST }}
            username: ${{ secrets.VPS_USERNAME }}
            key: ${{ secrets.SSH_KEY }}
            script: |
              # Check if Docker network exists
              if [[ -z $(sudo docker network ls --format '{{.Name}}' | grep 'web_profile_network') ]]; then
                echo "Creating Docker network"
                sudo docker network create web_profile_network
              else
                echo "Docker network 'web_profile_network' already exists, skipping creation."
              fi
      
              # Stop and remove existing containers (if any)
              sudo docker stop web-profile-next-app || true
              sudo docker rm web-profile-next-app || true
      
              # sudo docker pull harisramadan22/web-profile-next-app:latest

              sudo docker image prune -a --force
      
              # sudo docker run -d --name web-profile-next-app -p 3000:3000 --network web_profile_network ${{ secrets.DOCKER_USERNAME }}/web-profile-next-app:latest
